<?php

namespace Jtrw\DAO\Tests\Src;

use Jtrw\DAO\DataAccessObjectInterface;
use Jtrw\DAO\Exceptions\DatabaseException;
use Jtrw\DAO\Tests\ClickHouseConnector;
use Jtrw\DAO\ValueObject\ValueObjectInterface;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;

class ClickHouseObjectTest extends TestCase
{
    public const TABLE_TEST = "test";
    
    public DataAccessObjectInterface $db;
    
    public function setUp(): void
    {
        $this->db = ClickHouseConnector::getInstance();
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    
    public function testGetDataBaseType()
    {
        Assert::assertEquals(ClickHouseConnector::DRIVER_NAME, $this->db->getDatabaseType());
    }
    
    public function testInsert()
    {
        $id = random_int(0, 10000);
        $values = [
            'id' => $id,
        ];
        
        $this->db->insert(static::TABLE_TEST, $values);
        
        $sql = "SELECT * FROM ".static::TABLE_TEST;
        $search = [
            'id' => $id
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
        
        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values['id'], $resultData['id']);
    }
    
    public function testDelete()
    {
        $idSetting = 2222;
        
        $values = [
            'id' => 2222,
        ];
        
        $this->db->insert(static::TABLE_TEST, $values);
        Assert::assertIsInt($idSetting);

        $this->removeSettingRow($idSetting);

        $search = [
            'id' => $idSetting
        ];

        $sql = "SELECT * FROM ".static::TABLE_TEST;

        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);

        Assert::assertEmpty($result->toNative());
    }
    
    private function removeSettingRow(int $id): void
    {
        $this->db->delete(static::TABLE_TEST, ['id' => $id]);
    }
    
    public function testDeleteTable()
    {
        $tableName = "test_".time();
        $sql = "CREATE TABLE {$tableName} (id UInt64) ENGINE = MergeTree ORDER BY id;";
        $this->db->query($sql);

        $sqlSelect = "SELECT * FROM ".$tableName;

        $result = $this->db->select($sqlSelect)->toNative();
        Assert::assertEmpty($result);

        $this->db->deleteTable($tableName);

        try {
            $this->db->select($sqlSelect)->toNative();
            Assert::fail('DatabaseException was not thrown');
        } catch (\ClickHouseDB\Exception\DatabaseException $exp) {
            $msg = sprintf("Table default.%s doesn't exist.", $tableName);
            Assert::assertEquals($exp->getCode(), 60);
            Assert::assertStringContainsString($msg, $exp->getMessage(), "Message Not Found");
        }
    }
    
    public function testGetTables()
    {
        Assert::assertSame(
            $this->db->getTables(),
            [
                static::TABLE_TEST,
            ]
        );
    }
    
    public function testAssoc()
    {
        $sql = "SELECT id FROM ".static::TABLE_TEST;

        $fetchAssocObject = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ASSOC);
        Assert::assertInstanceOf(ValueObjectInterface::class, $fetchAssocObject);

        $fetchAllObject = $this->db->select($sql, [], [], DataAccessObjectInterface::FETCH_ALL);
        Assert::assertInstanceOf(ValueObjectInterface::class, $fetchAllObject);

        $assocData = $fetchAssocObject->toNative();
        $allData = $fetchAllObject->toNative();
        Assert::assertNotEmpty($allData[0]);

        Assert::assertEquals($assocData[$allData[0]['id']]['id'], $allData[0]['id']);
    }
    
    public function testMassInsert()
    {
        $idOne = random_int(0, 5000);
        $idTwo = random_int(0, 5000);
        $values = [
            [
                'id' => $idOne,
            ],
            [
                'id' => $idTwo,
            ]

        ];
        $this->db->massInsert(static::TABLE_TEST, $values);

        $sql = "SELECT * FROM ".static::TABLE_TEST;
        $search = [
            'id' => $values[1]['id']
        ];
        $result = $this->db->select($sql, $search, [], DataAccessObjectInterface::FETCH_ROW);
        Assert::assertInstanceOf(ValueObjectInterface::class, $result);

        $resultData = $result->toNative();
        Assert::assertNotEmpty($resultData);
        Assert::assertEquals($values[1]['id'], $resultData['id']);
    }
    
//    public function testUpdate()
//    {
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//
//        Assert::assertNotEmpty($resultData[0]);
//        $currentValue = $resultData[0];
//
//        $newId = 1111111;
//        $values = [
//            'id' => $newId
//        ];
//
//        $search = [
//            'id' => $currentValue['id']
//        ];
//
//        $result = $this->db->update(static::TABLE_TEST, $values, $search);
//        Assert::assertIsInt($result);
//
//        $sql = "SELECT * FROM ".static::TABLE_TEST;
//
//        $result = $this->db->select($sql, ['id' => $newId], [], DataAccessObjectInterface::FETCH_ROW);
//        Assert::assertInstanceOf(ValueObjectInterface::class, $result);
//
//        $resultData = $result->toNative();
//        Assert::assertNotEmpty($resultData);
//        Assert::assertEquals($resultData['id'], $values['id']);
//    }
}
